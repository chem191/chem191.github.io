[
["index.html", "CHEM 191 Workbook: Building a Teensy Air Quality Monitor", " CHEM 191 Workbook: Building a Teensy Air Quality Monitor Al Fischer Western Carolina University Copyright 2019 Al Fischer. This work is released under the CC-BY-NC-SA 4.0 license. You are free to share, adapt, and reuse this material for non-commercial purposes but you MUST attribute the author and you MUST release the work under the CC-BY-NC-SA 4.0 license. NOTE: This workbook is currently in DRAFT status. "],
["preface.html", "Preface What is Arduino? OK, but what is Teensy? Using this Book About Electricity Additional Resources", " Preface What is Arduino? Arduino is an open-source platform for developing interactive electronic devices. Arduinos of various flavors are used for all variety of things, from controlling motors and lights to reading data from sensors. Exercise 1 will provide a more thorough overview of Arduino. OK, but what is Teensy? Teensy is an offshoot of Arduino. It is capapble of most everything an Arduino can do and often much more. You might think of it as the supercar version of an Arduino. Aside from being more capable, it’s also smaller – a fact that gives rise to it’s name (Teensy). In this class, the names Teensy and Arduino will be used interchangeably. Exercise 1 will provide a more thorough overview of Teensy. Using this Book Some common typographical (formatting) conventions will be used throughout this book. Watch these visual cues. Code The exercises will make extensive use of computer code, which will always be represented with monospace font. It may be inline or offset. When you see code, you should take time to thoroughly digest it. Sometimes the code may work as-is; other times you may have to add to the code to make it work. And other times the code may be pseudocode, which is example code that looks like it would work but will not actually compile. The code will often be color-coded to highlight various features of the computer language. Notes and Warnings This book will also make use of notes and warnings. Examples are below. A note is written in a quote box with italic font and represents background information or a bit of knowledge to think about. A NOTE IN CAPITAL FONT REPRESENTS A SAFETY WARNING. YOU MUST PAY ATTENTION TO THESE WARNING OR YOU MAY BREAK EQUIPMENT AND/OR HARM YOURSELF OR YOUR CLASSMATES. About Electricity 0.0.1 Is it dangerous? Yes! And no. Although electricity can be very dangerous and even lethal, the work we’ll do in this class shouldn’t pose any particular danger if done carefully. There are two important factors to consider when deciding how dangerous an electrical device is: (1) the voltage and (2) the current. Generally speaking, it takes both to be dangerous. Most of the voltage in these exercises will be either 3.3V or 5V, with currents on the order of 100 mA. These are relatively low voltages and low currents, are safe to work with, and do not pose a shock hazard. That said, connecting things incorrectly can still break components, cause them to get very hot (they might burn you), or even go up in smoke so be careful when connecting things! Additional Resources There are myriad books, blog posts, and websites about Arduino, but few specifically deal with the Teensy version. This workbook and the Teensy website are your best resources regarding Teensy-specific items. If you want more general information on programming Arduinos, the Arduino IDE, or electronics, you may check some of the following: Monk, Simon. Programming Arduino: Getting Started with Sketches. Scherz, Paul and Simon Monk. Practical Electronics for Inventors. The Arduino forum. Boxall, John. Arduino Workshop. "],
["getting-started-with-arduino.html", "Exercise 1 Getting Started with Arduino Introduction 1.1 Install the Arduino IDE 1.2 Install Teensyduino 1.3 Test the Teensy!", " Exercise 1 Getting Started with Arduino Objective: Install Arduino and Teensyduino To turn in: Nothing! Make sure your software is installed and working so you’re ready for the next class period. Introduction Arduino is an open-source platform for developing interactive electronic devices. More specifically, Arduinos are microcontrollers, which are essentially small computers that can be programmed to perform a specific task over and over again. Microcontrollers are ubiquitous in the modern world and are embedded in scientific equipment, cars, cell phones, and nearly every other electronic device. Arduino provides a simple, standardized interface for microcontrollers, which has led it to become a very popular tool for hobby projects, citizen science tools, and even art installations. Arduino began in 2005 as a student project at the Interaction Design Institute Ivrea in Ivrea, Italy. An Arduino Uno. This class will use a variant of the Arduino, called the Teensy, as described below. (image credit: Spark Fun, CC BY 2.0) Using an Arduino requires a program, or a set of commands that are uploaded to the Arduino to have it perform the desired task. In the Arduino community, the term sketch is used synonymously with program. Examples of possible programs include having the Arduino measure things like temperature, light, or humidity, or control things like lights or motors. You could even have it measure the temperature and turn on a heater when it gets too cold. Although an Arduino can run as a stand-alone device once setup, it must first be programmed by a computer. To program the Arduino, we’ll use the a piece of software called an integrated development environment (IDE) that’s available for free on the Arduino website. The IDE is shown in the figure below. Arduino uses the computer language C – probably the most commonly used language in the world – but the IDE handles some of the programming behind the scenes to make it easier for the user. Arduino IDE showing an example program (image credit: Cedar101 [CC0], wikimedia.org) Part of the beauty of Arduino is its open-source nature. Many spin-offs and flavors of Arduino exist due to it’s open-source nature, each with its own unique benefits. In this class, we’ll use a variant of Arduino called the Teensy (specifically Teensy 3.5). The Teensy is programmed in the same way as an Arduino, but has a smaller form-factor and more capabilities than a standard Arduino. The picture below shows a Teensy 3.5 and the functions of each connection on the Teensy. Seeing all the functions laid out like that can be overwhelming, but we’ll walk through the ones we need to use step by step in future exercises. A Teensy Board, with the pin (connection) numbers and functionalities shown (reprinted from PJRC.com). This exercise will walk you through installation of the Arduino IDE, the software for the Teensy (Teensyduino), and an initial check of the board. 1.1 Install the Arduino IDE You MUST follow the order and instructions here or Teensyduino will not work! Use a web browser to navigate to https://www.arduino.cc/en/Main/OldSoftwareReleases#previous. Download the installer for version 1.8.6. You must choose the installer appropriate for your operating system. Choose Just Download to download the software, or make a donation if you’re feeling generous! Open the file that downloads and run the installer. Open the Arduino program to make sure it runs and to prepare for the next steps. 1.2 Install Teensyduino Use a web browser to navigate to https://www.pjrc.com/teensy/td_download.html. Download the correct installer for your operatring system. Note that steps 1 and 2 on the Teensy page should have been completed when you installed the Arduino IDE, above. Run the installer. When prompted: Select the Arduino/ folder for the install location. If Next is greyed out you probably downloaded the wrong version of the Arduino IDE. Select All when asked which additional libraries to install. 1.3 Test the Teensy! 1.3.1 Check the board Plug your Teensy into the computer via the USB connection. BE EXTREMELY CAREFUL WITH THE USB CONNECTION ON THE TEENSY. THEY BREAK VERY EASILY!! You should see the orange LED blinking on the Teensy. If you do not, something is wrong with your Teensy and you should notify your instructor. 1.3.2 Check the software Open the Arduino IDE. Click Tools &gt; Board &gt; Teensy 3.5 Click File &gt; Examples &gt; 01.Basics &gt; Blink. Find the part in the program that says delay(1000) and change it to delay(500). Click Verify in the software (checkmark button in upper left corner). Press the white button on the top of the Teensy. Press upload in the software (right arrow button, next to checkmark). You should see the orange LED blink more quickly. If you encountered any errors, something could be wrong with your software installation or you may have made a typo in the code. Notify your instructor of any problems. "],
["blink-an-led.html", "Exercise 2 Blink an LED Introduction 2.1 Connecting the LED 2.2 Program the Arduino", " Exercise 2 Blink an LED Objective: Use Arduino to turn an LED on and off. To turn in: Your working Arduino code and the Lab 2 Worksheet. Introduction This exercise will explore two concepts: (1) connecting devices to the Arduino and (2) the structure of the Arduino program used to control those devices. As a first example, we’ll connect an LED (light-emitting diode) to the Teensy and write a program to turn it on and off. How are things connected to a Teensy? The Teensy can control all sorts of devices, including lights, motors, and various sensors. The device to be controlled must be connected to one of the Teensy’s pins. You can think of a pin as a unique port or connection on the Teensy. Pins can send and receive information, so communication between the pin and the sensor goes both ways. One pin might be used to control a heater, while another might be used to read data from a temperature sensor. The pins that are available on the Teensy are shown in the figure below. Some pins provide power (3.3 V), some pins provide a connection to the circuit ground (GND), and some function to send and receive data. Some pins may have several functions, each represented by a different color rectangle on the diagram. Note, though, that each pin can only have one function at any given time. For now, we’ll just focus on the pin numbers. Those labeled 0-33 (shown in grey) are called digital pins; they function as both inputs and outputs, but we’ll use just the output functionality in this exercise. A Teensy Board, with the pin (connection) numbers and functionalities shown (reprinted from PJRC.com). There are several ways to connect something to the pins of the Teensy. One way is to directly solder items to the pins of the Teensy, in which a soft metal alloy is melted onto two parts as they are connected to make a permanent, metal connection. This is best saved for a final, fully vetted design that won’t ever need to be changed. We’ll use another method for this exercise called a solderless breadboard. A breadboard is shown in the figure below. The holes in the breadboard are spaced in such a way that a Teensy can be plugged directly into the board. Columns, labelled A, B, C, …, are connected across the board electrically, such that A1 and B1 are connected; rows are insulated from each other, such that A1 and A2 are not connected. The connections labeled with red and blue lines on each edge are connected together and are sometimes called rails; they provide an easy way to distribute power (e.g. the red rail) and ground (e.g. the blue rail) connections around the board. If that seems confusing, try watching this video this video. A solderless breadboard with purple lines indicated connected holes; the pattern continues down the board. Holes with the same number are connected electrically, except across the gap in the middle, while holes with different numbers are electrically insulated. What is a program? A program, or sketch in Arduino jargon, is a set of commands stored on the Teensy that tell it what to do. Although a Teensy can do most anything a computer would do, it can only run a single program over and over. For example, this exercise will use a program the Teensy to turn an LED on and off. Other options would be to collect data from a temperature sensor, or turn a motor on a off to move a robot (or to do all of those things at once). An Arduino program always consists of two parts: (1) a setup() function and (2) a loop() function. The setup() function runs once every time the Teensy is powered on. After that, the Teensy runs the loop() function over and over until it’s turned off. Usually, some initial lines of code are included above the setup() function provide definitions used throughout the program. In the exercise, we’ll connect an 3-color LED to a teensy and write a sketch to control it. 2.1 Connecting the LED Push your Teensy into the breadboard provided and connect the USB cable. Try not to bend the pins as you push it in. Refer to the diagram below if necessary. REMEMBER, BE EXTREMELY CAREFUL WITH THE USB CONNECTION ON THE TEENSY. THEY BREAK VERY EASILY!! Push the LED into the breadboard such that none of the leads (wires) are connected to anything else (each one is in it’s own row). Make sure you note which row the longer lead goes into. Always work with the Teensy unplugged from the computer. This will help ensure no “magic smoke” escapes. Use a jumper wire to connect the longer lead on the LED to the GND pin on the Teensy. Use 3 more jumper wires to connect the remaining three leads to pins 13, 14, and 15. Your final setup should look something like this picture. 2.2 Program the Arduino 2.2.1 One Color Open the Arduino IDE and load the Blink example (File &gt; Examples &gt; 0.1 Basic &gt; Blink) Go to File &gt; Save As to save the example under a new name in the default location (Documents/Arduino). Call it lastnameFirstname_blink.ino. Remember, files that don’t follow the naming convention exactly will incur point deductions. You should see the following at the top of the sketch: // Pin 13 has the LED on Teensy 3.0 // give it a name: int led = 13; Anything following a // is a comment; it does not affect the Arduino program. Please get in the habit of using comments to describe what each line of code does. The line int led = 13 defines the name of pin 13 as led. This name could be anything you wish. In this case, led is useful because the LED is connected to pin 13. Next is the setup() function. In this case, the only setup necessary is to set the mode of the led pin as an output. // the setup routine runs once when you press reset: void setup() { // initialize the digital pin as an output. pinMode(led, OUTPUT); } Finally, the loop() function, which runs over and over. digitalWrite(led, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(led, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second Assuming all those sections look good, press the Upload button (right arrow in top left). 2.2.2 Three Colors You should have seen a single color blinking on and off. We really want all three to go on and off. Let’s make some modifications to the code so that will happen. Define the two extra pins. In this case, it could be useful to refer to them by color. int blue = 13; // blue pin connected to pin 13 int green = 14; // green pin connected to pin 14 int red = 15; // red pin connected to pin 15 Set each of those to outputs in the setup() function. You will have to fill in the blanks for the red and green pins below. // the setup routine runs once when you press reset: void setup() { pinMode(blue, OUTPUT); // initialize the blue pin as an output. pinMode(____, OUTPUT); // initialize the green pin as an output. ______________________ // initialize the red pin as an output. } Finally, add the extra colors to the loop() function. // blue digitalWrite(blue, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(blue, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second // green digitalWrite(green, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(green, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second // red digitalWrite(red, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(red, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second Make sure you show your code and blinking LED to your instructor before you move on. 2.2.3 Make Your Own Changes Before you leave, modify your code to change the blink pattern. You can change the sequence of the colors, the time between blinks, the number of blinks, or the amount of time each color is on. Save your final code and turn it in to Dropbox. "],
["voltage.html", "Exercise 3 Voltage Introduction", " Exercise 3 Voltage Objective: To turn in: Introduction In the last exercise you used a Teensy to turn a light on and off, although we did not discuss what was happening electrically. "],
["functions.html", "Exercise 4 Functions", " Exercise 4 Functions Objective: To turn in: "],
["steps-to-a-successful-project.html", "Exercise 5 Steps to a Successful Project", " Exercise 5 Steps to a Successful Project Define your objective. Write the algorithm. Select the hardware. Write the code. Wire the project. Test and debug. "],
["soldering-and-pcb-assembly.html", "Exercise 6 Soldering and PCB Assembly", " Exercise 6 Soldering and PCB Assembly Objective: To turn in: "],
["testing-and-calibration.html", "Exercise 7 Testing and Calibration", " Exercise 7 Testing and Calibration Objective: To turn in: "],
["appendix-a-arduino-cookbook.html", "Appendix A: Arduino Cookbook Recipe 1", " Appendix A: Arduino Cookbook Recipe 1 Blink "],
["appendix-b-gory-details.html", "Appendix B: Gory Details Using the Snooze Library Using the RTC Char vs. String", " Appendix B: Gory Details Using the Snooze Library The Snooze library for Teensy allows us to put the Teensy into a hibernation mode, wherein it uses very little power. The Snooze library and it’s documentation can be found here: https://github.com/duff2013/Snooze. The library allows for numerous wakeups, including checking if a button is pressed, using a delay, and checking for a voltage threshold to be crossed among other options. We’ll use the real-time clock (RTC) wakeup for this project. The RTC wakeup allows the user to wake the Teensy up after a defined amount of time, as counted in hours, minutes, and/or seconds by the RTC on the Teensy. The first step to using Snooze is to call the library, load the alarm driver, and configure the SnoozeBlock to use the alarm driver. All of this goes before the setup() portion of the program. #include &lt;Snooze.h&gt; SnoozeAlarm alarm; SnoozeBlock config_teensy35(alarm) Then, we set the RTC timer for the desired snooze period (in the setup() function). In the example below the Teensy will wake up after 5 minutes. alarm.setRtcTimer(0, 5, 0); // h, m, s Finally, we put the Teensy into hibernation mode loop() function. Other options exist, such as deep sleep and sleep, but hibernate uses the least power. int who; who = Snooze.hibernate(config_teensy35); The Snooze function will return the pin number that caused the Teensy to wake up. The RTC wakes the Teensy up on pin 35. To know when that’s happened, we just wait until who is set to 35. if (who == 35) { # do something here } Using the RTC The Teensy 3.5 has an oscillator onboard. The battery is included on the WheeCAIR PCB. The coin cell (CR 1225) battery allows the RTC to keep time even when the board is not plugged in. The RTC is not temperature compensated so it may drift over time. The RTC runs during hibernation at full functionality. However, the Time library needs to resync everytime the Teensy wakes up using setSyncProvider(getTeensy3Time); Char vs. String "],
["appendix-c-functions.html", "Appendix C: Functions getTeensy3Time() setBMESamplingParameters() initializeBoard() pmStartMeasurement() pmStopMeasurement() writeFile(char filename[16]) blink() fillDigits(int digits) printTime(int h, int m, int s) printDate(int y, int m, int d) printDateTime(String d, String t) printData() createFileName(int y, int m, int d)", " Appendix C: Functions getTeensy3Time() This function comes from the RTC example. time_t getTeensy3Time() { return Teensy3Clock.get(); } setBMESamplingParameters() void setBMESamplingParameters() { if (!bme.begin(0x76)) { return; } // Set up oversampling and filter initialization bme.setTemperatureOversampling(BME680_OS_8X); bme.setHumidityOversampling(BME680_OS_2X); bme.setPressureOversampling(BME680_OS_4X); bme.setIIRFilterSize(BME680_FILTER_SIZE_3); bme.setGasHeater(320, 150); // 320*C for 150 ms } initializeBoard() void initializeBoard() { pinMode(33, OUTPUT); digitalWrite(33, HIGH); setSyncProvider(getTeensy3Time); if (!SD.begin(chipSelect)) { return; } if (!card.init(SPI_HALF_SPEED, chipSelect)) { // don&#39;t do anything more: while (1) { blink(); blink(); } } } pmStartMeasurement() bool pmStartMeasurement() { Serial1.begin(9600); delay(500); bool pmStatus = my_hpm.stop_autosend(); pmStatus = my_hpm.start_measurement(); } pmStopMeasurement() bool pmStopMeasurement() { bool pmStatus = my_hpm.stop_measurement(); delay(500); Serial1.end(); } writeFile(char filename[16]) void writeFile(char filename[16]) { File dataFile = SD.open(filename, FILE_WRITE); if (dataFile) { dataFile.print(printDateTime(printDate(year(), month(), day()), printTime(hour(), minute(), second()))); dataFile.print(printData()); dataFile.print(&#39;\\t&#39;); dataFile.print(p25); dataFile.print(&#39;\\t&#39;); dataFile.println(p10); delay(500); dataFile.close(); } else return; } blink() void blink() { digitalWriteFast(LED_BUILTIN, HIGH); delay(15); digitalWriteFast(LED_BUILTIN, LOW); delay(15); } fillDigits(int digits) String fillDigits(int digits) { if (digits &lt; 10) { String digitsout = &quot;0&quot; + String(digits); return digitsout; } else return digits; } printTime(int h, int m, int s) String printTime(int h, int m, int s) { return fillDigits(h) + &quot;:&quot; + fillDigits(m) + &quot;:&quot; + fillDigits(s); } printDate(int y, int m, int d) String printDate(int y, int m, int d) { return String(y) + &quot;-&quot; + fillDigits(m) + &quot;-&quot; + fillDigits(d); } printDateTime(String d, String t) String printDateTime(String d, String t) { return d + &#39; &#39; + t + &#39;\\t&#39;; } printData() String printData() { return String(bme.temperature) + &#39;\\t&#39; + String(bme.pressure/100.0) + &#39;\\t&#39; + String(bme.humidity) + &#39;\\t&#39; + String(bme.gas_resistance/1000.0); } createFileName(int y, int m, int d) String createFileName(int y, int m, int d) { return String(fillDigits(y)) + String(fillDigits(m)) + String(fillDigits(d)) + deviceID + &quot;.txt&quot;; } "],
["appendix-d-strategies-for-troubleshooting.html", "Appendix D: Strategies for Troubleshooting", " Appendix D: Strategies for Troubleshooting "],
["glossary-and-abbreviations.html", "Glossary and Abbreviations", " Glossary and Abbreviations Current (i) The flow of electical energy, measured in amperes (A) or amps for short. By convention, current flows from the positive side of a circuit to the negative side. [Note that the actual charge carriers, electrons, flow from the negative side the positive side!] Electricity A form of energy resulting from the accumulation or movement of charged particles, typically electrons. Practically speaking, electricity is a form of energy that we use to generate heat, light, and movement. LED Light emitting diode; a semi-conductor designed to emit light when a current is applied. Power (P) The rate of work, measured in Watts (W). Practically speaking, power is the rate at which a circuit converts electrical energy to another form of energy (such as light). \\[ P = V i \\] Resistance (R) The resistance to current flow, measured in ohms (\\(\\Omega\\)). \\[ R = \\frac{V}{i} \\] Voltage (V) The potential energy difference between two points in a circuit measured in volts (V). A larger voltage indicates a stronger “push” to drive electric current. "]
]
